{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { withDirectives as _withDirectives, vShow as _vShow, createVNode as _createVNode } from \"vue\";\n// Components\nimport { VExpandTransition } from \"../transitions/index.mjs\";\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\"; // Composables\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\"; // Utilities\nimport { inject } from 'vue';\nimport { genericComponent, useRender } from \"../../util/index.mjs\";\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n  props: {\n    ...makeLazyProps()\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel');\n    const {\n      hasContent,\n      onAfterLeave\n    } = useLazy(props, expansionPanel.isSelected);\n    useRender(() => _createVNode(VExpandTransition, {\n      \"onAfterLeave\": onAfterLeave\n    }, {\n      default: () => [_withDirectives(_createVNode(\"div\", {\n        \"class\": \"v-expansion-panel-text\"\n      }, [slots.default && hasContent.value && _createVNode(\"div\", {\n        \"class\": \"v-expansion-panel-text__wrapper\"\n      }, [slots.default?.()])]), [[_vShow, expansionPanel.isSelected.value]])]\n    }));\n    return {};\n  }\n});","map":{"version":3,"mappings":";;AAAA;AAAA,SACSA,iBAAiB;AAAA,SACjBC,qBAAqB,kCAE9B;AAAA,SACSC,aAAa,EAAEC,OAAO,sCAE/B;AACA,SAASC,MAAM,QAAQ,KAAK;AAAA,SACnBC,gBAAgB,EAAEC,SAAS;AAEpC,OAAO,MAAMC,mBAAmB,GAAGF,gBAAgB,EAAE,CAAC;EACpDG,IAAI,EAAE,qBAAqB;EAE3BC,KAAK,EAAE;IACL,GAAGP,aAAa;EAClB,CAAC;EAEDQ,KAAKA,CAAED,KAAK,QAAa;IAAA,IAAX;MAAEE;IAAM,CAAC;IACrB,MAAMC,cAAc,GAAGR,MAAM,CAACH,qBAAqB,CAAC;IAEpD,IAAI,CAACW,cAAc,EAAE,MAAM,IAAIC,KAAK,CAAC,8EAA8E,CAAC;IAEpH,MAAM;MAAEC,UAAU;MAAEC;IAAa,CAAC,GAAGZ,OAAO,CAACM,KAAK,EAAEG,cAAc,CAACI,UAAU,CAAC;IAE9EV,SAAS,CAAC;MAAA,gBAC0BS;IAAY;MAAAE;QAAA,SAEpC;MAAwB,IAG5BN,KAAK,CAACM,OAAO,IAAIH,UAAU,CAACI,KAAK;QAAA,SACtB;MAAiC,IACxCP,KAAK,CAACM,OAAO,IAAI,EAEtB,cANQL,cAAc,CAACI,UAAU,CAACE,KAAK;IAAA,EAS7C,CAAC;IAEF,OAAO,CAAC,CAAC;EACX;AACF,CAAC,CAAC","names":["VExpandTransition","VExpansionPanelSymbol","makeLazyProps","useLazy","inject","genericComponent","useRender","VExpansionPanelText","name","props","setup","slots","expansionPanel","Error","hasContent","onAfterLeave","isSelected","default","value"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelText.tsx"],"sourcesContent":["// Components\nimport { VExpandTransition } from '@/components/transitions'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { inject } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n\n  props: {\n    ...makeLazyProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class=\"v-expansion-panel-text\"\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          )}\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}