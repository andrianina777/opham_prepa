{"ast":null,"code":"import { resolveDirective as _resolveDirective, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\n// Components\nimport { VDataTableGroupHeaderRow } from \"./VDataTableGroupHeaderRow.mjs\";\nimport { VDataTableRow } from \"./VDataTableRow.mjs\"; // Composables\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { useExpanded } from \"./composables/expand.mjs\";\nimport { useHeaders } from \"./composables/headers.mjs\";\nimport { useSelection } from \"./composables/select.mjs\";\nimport { useGroupBy } from \"./composables/group.mjs\"; // Utilities\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\nexport const VDataTableRows = genericComponent()({\n  name: 'VDataTableRows',\n  props: {\n    loading: [Boolean, String],\n    loadingText: {\n      type: String,\n      default: '$vuetify.dataIterator.loadingText'\n    },\n    hideNoData: Boolean,\n    items: {\n      type: Array,\n      default: () => []\n    },\n    noDataText: {\n      type: String,\n      default: '$vuetify.noDataText'\n    },\n    rowHeight: Number,\n    'onClick:row': Function\n  },\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const {\n      columns\n    } = useHeaders();\n    const {\n      expandOnClick,\n      toggleExpand,\n      isExpanded\n    } = useExpanded();\n    const {\n      isSelected,\n      toggleSelect\n    } = useSelection();\n    const {\n      toggleGroup,\n      isGroupOpen\n    } = useGroupBy();\n    const {\n      t\n    } = useLocale();\n    useRender(() => _createVNode(_Fragment, null, [props.loading ? slots.loading?.() ?? _createVNode(VDataTableRow, {\n      \"class\": \"v-data-table-rows-no-data\",\n      \"key\": \"loading\"\n    }, {\n      default: () => [t(props.loadingText)]\n    }) : undefined, !props.loading && !props.items.length && !props.hideNoData && (slots['no-data']?.() ?? _createVNode(VDataTableRow, {\n      \"class\": \"v-data-table-rows-no-data\",\n      \"key\": \"no-data\"\n    }, {\n      default: () => [t(props.noDataText)]\n    })), props.items.map((item, index) => {\n      if (item.type === 'group-header') {\n        return slots['group-header'] ? slots['group-header']({\n          index,\n          item,\n          columns: columns.value,\n          isExpanded,\n          toggleExpand,\n          isSelected,\n          toggleSelect,\n          toggleGroup,\n          isGroupOpen\n        }) : _createVNode(VDataTableGroupHeaderRow, {\n          \"key\": `group-header_${item.id}`,\n          \"item\": item\n        }, slots);\n      }\n      const slotProps = {\n        index,\n        item,\n        columns: columns.value,\n        isExpanded,\n        toggleExpand,\n        isSelected,\n        toggleSelect\n      };\n      return _createVNode(_Fragment, null, [slots.item ? slots.item(slotProps) : _createVNode(VDataTableRow, {\n        \"key\": `item_${item.value}`,\n        \"onClick\": expandOnClick.value || props['onClick:row'] ? event => {\n          if (expandOnClick.value) {\n            toggleExpand(item);\n          }\n          props['onClick:row']?.(event, {\n            item\n          });\n        } : undefined,\n        \"index\": index,\n        \"item\": item\n      }, slots), isExpanded(item) && slots['expanded-row']?.(slotProps)]);\n    })]));\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["VDataTableGroupHeaderRow","VDataTableRow","useLocale","useExpanded","useHeaders","useSelection","useGroupBy","genericComponent","useRender","VDataTableRows","name","props","loading","Boolean","String","loadingText","type","default","hideNoData","items","Array","noDataText","rowHeight","Number","Function","setup","emit","slots","columns","expandOnClick","toggleExpand","isExpanded","isSelected","toggleSelect","toggleGroup","isGroupOpen","t","undefined","length","map","item","index","value","id","slotProps","event"],"sources":["../../../src/labs/VDataTable/VDataTableRows.tsx"],"sourcesContent":["// Components\nimport { VDataTableGroupHeaderRow } from './VDataTableGroupHeaderRow'\nimport { VDataTableRow } from './VDataTableRow'\n\n// Composables\nimport { useLocale } from '@/composables/locale'\nimport { useExpanded } from './composables/expand'\nimport { useHeaders } from './composables/headers'\nimport { useSelection } from './composables/select'\nimport { useGroupBy } from './composables/group'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { DataTableItem, GroupHeaderItem, InternalDataTableHeader, InternalDataTableItem } from './types'\nimport type { PropType } from 'vue'\n\ntype GroupHeaderSlot = {\n  index: number\n  item: GroupHeaderItem\n  columns: InternalDataTableHeader[]\n  isExpanded: (item: DataTableItem) => boolean\n  toggleExpand: (item: DataTableItem) => void\n  isSelected: (items: DataTableItem[]) => boolean\n  toggleSelect: (item: DataTableItem) => void\n  toggleGroup: (group: GroupHeaderItem) => void\n  isGroupOpen: (group: GroupHeaderItem) => boolean\n}\n\ntype ItemSlot = {\n  index: number\n  item: DataTableItem\n  columns: InternalDataTableHeader[]\n  isExpanded: (item: DataTableItem) => boolean\n  toggleExpand: (item: DataTableItem) => void\n  isSelected: (items: DataTableItem[]) => boolean\n  toggleSelect: (item: DataTableItem) => void\n}\n\nexport type VDataTableRowsSlots = {\n  default: []\n  item: [ItemSlot]\n  loading: []\n  'group-header': [GroupHeaderSlot]\n  'no-data': []\n  'expanded-row': [ItemSlot]\n  'item.data-table-select': [ItemSlot]\n  'item.data-table-expand': [ItemSlot]\n} & { [key: `item.${string}`]: [ItemSlot] }\n\nexport const VDataTableRows = genericComponent<VDataTableRowsSlots>()({\n  name: 'VDataTableRows',\n\n  props: {\n    loading: [Boolean, String],\n    loadingText: {\n      type: String,\n      default: '$vuetify.dataIterator.loadingText',\n    },\n    hideNoData: Boolean,\n    items: {\n      type: Array as PropType<InternalDataTableItem[]>,\n      default: () => ([]),\n    },\n    noDataText: {\n      type: String,\n      default: '$vuetify.noDataText',\n    },\n    rowHeight: Number,\n    'onClick:row': Function as PropType<(e: Event, value: { item: DataTableItem }) => void>,\n  },\n\n  setup (props, { emit, slots }) {\n    const { columns } = useHeaders()\n    const { expandOnClick, toggleExpand, isExpanded } = useExpanded()\n    const { isSelected, toggleSelect } = useSelection()\n    const { toggleGroup, isGroupOpen } = useGroupBy()\n    const { t } = useLocale()\n\n    useRender(() => (\n      <>\n        { props.loading ? slots.loading?.() ?? (\n          <VDataTableRow\n            class=\"v-data-table-rows-no-data\"\n            key=\"loading\"\n          >\n            { t(props.loadingText) }\n          </VDataTableRow>\n        ) : undefined }\n\n        { !props.loading && !props.items.length && !props.hideNoData && (slots['no-data']?.() ?? (\n          <VDataTableRow\n            class=\"v-data-table-rows-no-data\"\n            key=\"no-data\"\n          >\n            { t(props.noDataText) }\n          </VDataTableRow>\n        ))}\n\n        { props.items.map((item, index) => {\n          if (item.type === 'group-header') {\n            return slots['group-header'] ? slots['group-header']({\n              index,\n              item,\n              columns: columns.value,\n              isExpanded,\n              toggleExpand,\n              isSelected,\n              toggleSelect,\n              toggleGroup,\n              isGroupOpen,\n            } as GroupHeaderSlot) : (\n              <VDataTableGroupHeaderRow\n                key={ `group-header_${item.id}` }\n                item={ item }\n                v-slots={ slots }\n              />\n            )\n          }\n\n          const slotProps = {\n            index,\n            item,\n            columns: columns.value,\n            isExpanded,\n            toggleExpand,\n            isSelected,\n            toggleSelect,\n          } as ItemSlot\n\n          return (\n            <>\n              { slots.item ? slots.item(slotProps) : (\n                <VDataTableRow\n                  key={ `item_${item.value}` }\n                  onClick={ expandOnClick.value || props['onClick:row'] ? (event: Event) => {\n                    if (expandOnClick.value) {\n                      toggleExpand(item)\n                    }\n\n                    props['onClick:row']?.(event, { item })\n                  } : undefined }\n                  index={ index }\n                  item={ item }\n                  v-slots={ slots }\n                />\n              )}\n\n              { isExpanded(item) && slots['expanded-row']?.(slotProps) }\n            </>\n          )\n        })}\n      </>\n    ))\n\n    return {}\n  },\n})\n\nexport type VDataTableRows = InstanceType<typeof VDataTableRows>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}