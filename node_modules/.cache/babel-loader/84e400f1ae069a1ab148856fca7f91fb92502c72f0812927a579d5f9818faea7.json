{"ast":null,"code":"import { vModelText as _vModelText, withDirectives as _withDirectives, mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\n// Styles\nimport \"./VTextarea.css\";\nimport \"../VTextField/VTextField.css\";\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from \"../VField/VField.mjs\";\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\";\nimport { VField } from \"../VField/index.mjs\"; // Directives\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Composables\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useFocus } from \"../../composables/focus.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue';\nimport { callEvent, clamp, convertToUnit, filterInputAttrs, genericComponent, useRender } from \"../../util/index.mjs\"; // Types\nexport const VTextarea = genericComponent()({\n  name: 'VTextarea',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String],\n    counterValue: Function,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: v => !isNaN(parseFloat(v))\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: v => !isNaN(parseFloat(v))\n    },\n    suffix: String,\n    modelModifiers: Object,\n    ...makeVInputProps(),\n    ...makeVFieldProps()\n  },\n  emits: {\n    'click:control': e => true,\n    'mousedown:control': e => true,\n    'update:focused': focused => true,\n    'update:modelValue': val => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value || '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n    function onIntersect(isIntersecting, entries) {\n      if (!props.autofocus || !isIntersecting) return;\n      entries[0].target?.focus?.();\n    }\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const controlHeight = ref('');\n    const textareaRef = ref();\n    const isActive = computed(() => isFocused.value || props.persistentPlaceholder);\n    const messages = computed(() => {\n      return props.messages.length ? props.messages : isFocused.value || props.persistentHint ? props.hint : '';\n    });\n    function onFocus() {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus();\n      }\n      if (!isFocused.value) focus();\n    }\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n    function onControlMousedown(e) {\n      emit('mousedown:control', e);\n    }\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = '';\n        callEvent(props['onClick:clear'], e);\n      });\n    }\n    function onInput(e) {\n      const el = e.target;\n      model.value = el.value;\n      if (props.modelModifiers?.trim) {\n        const caretPosition = [el.selectionStart, el.selectionEnd];\n        nextTick(() => {\n          el.selectionStart = caretPosition[0];\n          el.selectionEnd = caretPosition[1];\n        });\n      }\n    }\n    const sizerRef = ref();\n    function calculateInputHeight() {\n      if (!props.autoGrow) return;\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return;\n        const style = getComputedStyle(sizerRef.value);\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el);\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) + parseFloat(style.getPropertyValue('--v-input-padding-top')) + parseFloat(style.getPropertyValue('--v-field-padding-bottom'));\n        const height = sizerRef.value.scrollHeight;\n        const lineHeight = parseFloat(style.lineHeight);\n        const minHeight = Math.max(parseFloat(props.rows) * lineHeight + padding, parseFloat(fieldStyle.getPropertyValue('--v-input-control-height')));\n        const maxHeight = parseFloat(props.maxRows) * lineHeight + padding || Infinity;\n        controlHeight.value = convertToUnit(clamp(height ?? 0, minHeight, maxHeight));\n      });\n    }\n    onMounted(calculateInputHeight);\n    watch(model, calculateInputHeight);\n    watch(() => props.rows, calculateInputHeight);\n    watch(() => props.maxRows, calculateInputHeight);\n    watch(() => props.density, calculateInputHeight);\n    let observer;\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight);\n        observer.observe(sizerRef.value);\n      } else {\n        observer?.disconnect();\n      }\n    });\n    onBeforeUnmount(() => {\n      observer?.disconnect();\n    });\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue);\n      const hasDetails = !!(hasCounter || slots.details);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const [{\n        modelValue: _,\n        ...inputProps\n      }] = filterInputProps(props);\n      const [fieldProps] = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-textarea v-text-field', {\n          'v-textarea--prefixed': props.prefix,\n          'v-textarea--suffixed': props.suffix,\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-textarea--auto-grow': props.autoGrow,\n          'v-textarea--no-resize': props.noResize || props.autoGrow,\n          'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant)\n        }],\n        \"onClick:prepend\": props['onClick:prepend'],\n        \"onClick:append\": props['onClick:append']\n      }, rootAttrs, inputProps, {\n        \"focused\": isFocused.value,\n        \"messages\": messages.value\n      }), {\n        ...slots,\n        default: _ref2 => {\n          let {\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"style\": {\n              '--v-textarea-control-height': controlHeight.value\n            },\n            \"onClick\": onControlClick,\n            \"onMousedown\": onControlMousedown,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": props['onClick:prependInner'],\n            \"onClick:appendInner\": props['onClick:appendInner'],\n            \"role\": \"textbox\"\n          }, fieldProps, {\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"disabled\": isDisabled.value,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), {\n            ...slots,\n            default: _ref3 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), _withDirectives(_createVNode(\"textarea\", _mergeProps({\n                \"ref\": textareaRef,\n                \"class\": fieldClass,\n                \"value\": model.value,\n                \"onInput\": onInput,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"placeholder\": props.placeholder,\n                \"rows\": props.rows,\n                \"name\": props.name,\n                \"onFocus\": onFocus,\n                \"onBlur\": blur\n              }, slotProps, inputAttrs), null), [[_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]), props.autoGrow && _withDirectives(_createVNode(\"textarea\", {\n                \"class\": [fieldClass, 'v-textarea__sizer'],\n                \"onUpdate:modelValue\": $event => model.value = $event,\n                \"ref\": sizerRef,\n                \"readonly\": true,\n                \"aria-hidden\": \"true\"\n              }, null), [[_vModelText, model.value]]), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          });\n        },\n        details: hasDetails ? slotProps => _createVNode(_Fragment, null, [slots.details?.(slotProps), hasCounter && _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n          \"active\": props.persistentCounter || isFocused.value,\n          \"value\": counterValue.value,\n          \"max\": max.value\n        }, slots.counter)])]) : undefined\n      });\n    });\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef);\n  }\n});","map":{"version":3,"mappings":"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","names":["filterFieldProps","makeVFieldProps","filterInputProps","makeVInputProps","VInput","VCounter","VField","Intersect","forwardRefs","useFocus","useProxiedModel","computed","nextTick","onBeforeUnmount","onMounted","ref","watch","callEvent","clamp","convertToUnit","filterInputAttrs","genericComponent","useRender","VTextarea","name","directives","inheritAttrs","props","autoGrow","Boolean","autofocus","counter","Number","String","counterValue","Function","hint","persistentHint","prefix","placeholder","persistentPlaceholder","persistentCounter","noResize","rows","type","default","validator","v","isNaN","parseFloat","maxRows","suffix","modelModifiers","Object","emits","e","focused","val","setup","attrs","emit","slots","model","isFocused","focus","blur","value","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","vInputRef","vFieldRef","controlHeight","textareaRef","isActive","messages","onFocus","document","activeElement","onControlClick","onControlMousedown","onClear","stopPropagation","onInput","el","trim","caretPosition","selectionStart","selectionEnd","sizerRef","calculateInputHeight","style","getComputedStyle","fieldStyle","$el","padding","getPropertyValue","height","scrollHeight","lineHeight","minHeight","Math","maxHeight","Infinity","density","observer","ResizeObserver","observe","disconnect","hasCounter","hasDetails","details","rootAttrs","inputAttrs","modelValue","_","inputProps","fieldProps","includes","variant","_ref2","isDisabled","isDirty","isReadonly","isValid","dirty","_ref3","class","fieldClass","slotProps","handler","once"],"sources":["../../../src/components/VTextarea/VTextarea.tsx"],"sourcesContent":["// Styles\nimport './VTextarea.sass'\nimport '../VTextField/VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { callEvent, clamp, convertToUnit, filterInputAttrs, genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport const VTextarea = genericComponent<Omit<VInputSlots & VFieldSlots, 'default'>>()({\n  name: 'VTextarea',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    suffix: String,\n    modelModifiers: Object as PropType<Record<string, boolean>>,\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as string | number\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const controlHeight = ref('')\n    const textareaRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      isFocused.value ||\n      props.persistentPlaceholder\n    ))\n\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isFocused.value || props.persistentHint) ? props.hint : ''\n    })\n\n    function onFocus () {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      const el = e.target as HTMLTextAreaElement\n      model.value = el.value\n      if (props.modelModifiers?.trim) {\n        const caretPosition = [el.selectionStart, el.selectionEnd]\n        nextTick(() => {\n          el.selectionStart = caretPosition[0]\n          el.selectionEnd = caretPosition[1]\n        })\n      }\n    }\n\n    const sizerRef = ref<HTMLTextAreaElement>()\n    function calculateInputHeight () {\n      if (!props.autoGrow) return\n\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return\n\n        const style = getComputedStyle(sizerRef.value)\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el)\n\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-input-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-field-padding-bottom'))\n\n        const height = sizerRef.value.scrollHeight\n        const lineHeight = parseFloat(style.lineHeight)\n        const minHeight = Math.max(\n          parseFloat(props.rows) * lineHeight + padding,\n          parseFloat(fieldStyle.getPropertyValue('--v-input-control-height'))\n        )\n        const maxHeight = parseFloat(props.maxRows!) * lineHeight + padding || Infinity\n\n        controlHeight.value = convertToUnit(clamp(height ?? 0, minHeight, maxHeight))\n      })\n    }\n\n    onMounted(calculateInputHeight)\n    watch(model, calculateInputHeight)\n    watch(() => props.rows, calculateInputHeight)\n    watch(() => props.maxRows, calculateInputHeight)\n    watch(() => props.density, calculateInputHeight)\n\n    let observer: ResizeObserver | undefined\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight)\n        observer.observe(sizerRef.value!)\n      } else {\n        observer?.disconnect()\n      }\n    })\n    onBeforeUnmount(() => {\n      observer?.disconnect()\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-textarea v-text-field',\n            {\n              'v-textarea--prefixed': props.prefix,\n              'v-textarea--suffixed': props.suffix,\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-textarea--auto-grow': props.autoGrow,\n              'v-textarea--no-resize': props.noResize || props.autoGrow,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          onClick:prepend={ props['onClick:prepend'] }\n          onClick:append={ props['onClick:append'] }\n          { ...rootAttrs }\n          { ...inputProps }\n          focused={ isFocused.value }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                style={{\n                  '--v-textarea-control-height': controlHeight.value,\n                }}\n                onClick={ onControlClick }\n                onMousedown={ onControlMousedown }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role=\"textbox\"\n                { ...fieldProps }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      { props.prefix && (\n                        <span class=\"v-text-field__prefix\">\n                          { props.prefix }\n                        </span>\n                      )}\n\n                      <textarea\n                        ref={ textareaRef }\n                        class={ fieldClass }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        placeholder={ props.placeholder }\n                        rows={ props.rows }\n                        name={ props.name }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      { props.autoGrow && (\n                        <textarea\n                          class={[\n                            fieldClass,\n                            'v-textarea__sizer',\n                          ]}\n                          v-model={ model.value }\n                          ref={ sizerRef }\n                          readonly\n                          aria-hidden=\"true\"\n                        />\n                      )}\n\n                      { props.suffix && (\n                        <span class=\"v-text-field__suffix\">\n                          { props.suffix }\n                        </span>\n                      )}\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef)\n  },\n})\n\nexport type VTextarea = InstanceType<typeof VTextarea>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}