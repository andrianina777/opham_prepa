{"ast":null,"code":"import { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VBanner.css\";\n\n// Components\nimport { VAvatar } from \"../VAvatar/index.mjs\";\nimport { VBannerActions } from \"./VBannerActions.mjs\";\nimport { VBannerText } from \"./VBannerText.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\"; // Composables\nimport { makeBorderProps, useBorder } from \"../../composables/border.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeLocationProps, useLocation } from \"../../composables/location.mjs\";\nimport { makePositionProps, usePosition } from \"../../composables/position.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\";\nimport { useDisplay } from \"../../composables/display.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\"; // Utilities\nimport { genericComponent, useRender } from \"../../util/index.mjs\";\nimport { toRef } from 'vue';\n\n// Types\n\nexport const VBanner = genericComponent()({\n  name: 'VBanner',\n  props: {\n    avatar: String,\n    color: String,\n    icon: IconValue,\n    lines: String,\n    stacked: Boolean,\n    sticky: Boolean,\n    text: String,\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeLocationProps(),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps()\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      borderClasses\n    } = useBorder(props);\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      mobile\n    } = useDisplay();\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      locationStyles\n    } = useLocation(props);\n    const {\n      positionClasses\n    } = usePosition(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const color = toRef(props, 'color');\n    const density = toRef(props, 'density');\n    provideDefaults({\n      VBannerActions: {\n        color,\n        density\n      }\n    });\n    useRender(() => {\n      const hasText = !!(props.text || slots.text);\n      const hasPrependMedia = !!(props.avatar || props.icon);\n      const hasPrepend = !!(hasPrependMedia || slots.prepend);\n      return _createVNode(props.tag, {\n        \"class\": ['v-banner', {\n          'v-banner--stacked': props.stacked || mobile.value,\n          'v-banner--sticky': props.sticky,\n          [`v-banner--${props.lines}-line`]: !!props.lines\n        }, borderClasses.value, densityClasses.value, elevationClasses.value, positionClasses.value, roundedClasses.value, themeClasses.value],\n        \"style\": [dimensionStyles.value, locationStyles.value],\n        \"role\": \"banner\"\n      }, {\n        default: () => [hasPrepend && _createVNode(\"div\", {\n          \"key\": \"prepend\",\n          \"class\": \"v-banner__prepend\"\n        }, [!slots.prepend ? _createVNode(VAvatar, {\n          \"key\": \"prepend-avatar\",\n          \"color\": color.value,\n          \"density\": density.value,\n          \"icon\": props.icon,\n          \"image\": props.avatar\n        }, null) : _createVNode(VDefaultsProvider, {\n          \"key\": \"prepend-defaults\",\n          \"disabled\": !hasPrependMedia,\n          \"defaults\": {\n            VAvatar: {\n              color: color.value,\n              density: density.value,\n              icon: props.icon,\n              image: props.avatar\n            }\n          }\n        }, slots.prepend)]), _createVNode(\"div\", {\n          \"class\": \"v-banner__content\"\n        }, [hasText && _createVNode(VBannerText, {\n          \"key\": \"text\"\n        }, {\n          default: () => [slots.text?.() ?? props.text]\n        }), slots.default?.()]), slots.actions && _createVNode(VBannerActions, {\n          \"key\": \"actions\"\n        }, slots.actions)]\n      });\n    });\n  }\n});","map":{"version":3,"mappings":"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","names":["VAvatar","VBannerActions","VBannerText","VDefaultsProvider","makeBorderProps","useBorder","makeDensityProps","useDensity","makeDimensionProps","useDimension","makeElevationProps","useElevation","makeLocationProps","useLocation","makePositionProps","usePosition","makeRoundedProps","useRounded","makeTagProps","makeThemeProps","provideTheme","provideDefaults","useDisplay","IconValue","genericComponent","useRender","toRef","VBanner","name","props","avatar","String","color","icon","lines","stacked","Boolean","sticky","text","setup","slots","borderClasses","densityClasses","mobile","dimensionStyles","elevationClasses","locationStyles","positionClasses","roundedClasses","themeClasses","density","hasText","hasPrependMedia","hasPrepend","prepend","value","default","image","actions"],"sources":["../../../src/components/VBanner/VBanner.tsx"],"sourcesContent":["// Styles\nimport './VBanner.sass'\n\n// Components\nimport { VAvatar } from '@/components/VAvatar'\nimport { VBannerActions } from './VBannerActions'\nimport { VBannerText } from './VBannerText'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useDisplay } from '@/composables/display'\nimport { IconValue } from '@/composables/icons'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { MakeSlots } from '@/util'\nimport type { PropType } from 'vue'\n\nexport type VBannerSlots = MakeSlots<{\n  default: []\n  prepend: []\n  text: []\n  actions: []\n}>\n\nexport const VBanner = genericComponent<VBannerSlots>()({\n  name: 'VBanner',\n\n  props: {\n    avatar: String,\n    color: String,\n    icon: IconValue,\n    lines: String as PropType<'one' | 'two' | 'three'>,\n    stacked: Boolean,\n    sticky: Boolean,\n    text: String,\n\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeLocationProps(),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  setup (props, { slots }) {\n    const { borderClasses } = useBorder(props)\n    const { densityClasses } = useDensity(props)\n    const { mobile } = useDisplay()\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { roundedClasses } = useRounded(props)\n\n    const { themeClasses } = provideTheme(props)\n\n    const color = toRef(props, 'color')\n    const density = toRef(props, 'density')\n\n    provideDefaults({ VBannerActions: { color, density } })\n\n    useRender(() => {\n      const hasText = !!(props.text || slots.text)\n      const hasPrependMedia = !!(props.avatar || props.icon)\n      const hasPrepend = !!(hasPrependMedia || slots.prepend)\n\n      return (\n        <props.tag\n          class={[\n            'v-banner',\n            {\n              'v-banner--stacked': props.stacked || mobile.value,\n              'v-banner--sticky': props.sticky,\n              [`v-banner--${props.lines}-line`]: !!props.lines,\n            },\n            borderClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            positionClasses.value,\n            roundedClasses.value,\n            themeClasses.value,\n          ]}\n          style={[\n            dimensionStyles.value,\n            locationStyles.value,\n          ]}\n          role=\"banner\"\n        >\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-banner__prepend\">\n              { !slots.prepend ? (\n                <VAvatar\n                  key=\"prepend-avatar\"\n                  color={ color.value }\n                  density={ density.value }\n                  icon={ props.icon }\n                  image={ props.avatar }\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"prepend-defaults\"\n                  disabled={ !hasPrependMedia }\n                  defaults={{\n                    VAvatar: {\n                      color: color.value,\n                      density: density.value,\n                      icon: props.icon,\n                      image: props.avatar,\n                    },\n                  }}\n                  v-slots:default={ slots.prepend }\n                />\n              )}\n            </div>\n          )}\n\n          <div class=\"v-banner__content\">\n            { hasText && (\n              <VBannerText key=\"text\">\n                { slots.text?.() ?? props.text }\n              </VBannerText>\n            )}\n\n            { slots.default?.() }\n          </div>\n\n          { slots.actions && (\n            <VBannerActions key=\"actions\" v-slots:default={ slots.actions } />\n          )}\n        </props.tag>\n      )\n    })\n  },\n})\n\nexport type VBanner = InstanceType<typeof VBanner>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}